// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DeviceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("Devices", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DevicePropertyValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int>("DeviceTypePropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("DeviceTypePropertyId")
                        .IsUnique();

                    b.ToTable("DevicePropertyValues", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DeviceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_DeviceTypes_ParentId_Name")
                        .HasFilter("ParentId IS NOT NULL");

                    b.ToTable("DeviceTypes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DeviceTypeProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DeviceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_DeviceTypeProperties_DeviceTypeId_Name");

                    b.ToTable("DeviceTypeProperties", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Device", b =>
                {
                    b.HasOne("Domain.Entities.DeviceType", "DeviceType")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Devices_DeviceTypes_DeviceTypeId");

                    b.Navigation("DeviceType");
                });

            modelBuilder.Entity("Domain.Entities.DevicePropertyValue", b =>
                {
                    b.HasOne("Domain.Entities.Device", "Device")
                        .WithMany("DevicePropertyValues")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DevicePropertyValues_Devices_DeviceId");

                    b.HasOne("Domain.Entities.DeviceTypeProperty", "DeviceTypeProperty")
                        .WithOne("DevicePropertyValue")
                        .HasForeignKey("Domain.Entities.DevicePropertyValue", "DeviceTypePropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DevicePropertyValues_DeviceTypeProperties_DeviceTypePropertyId");

                    b.Navigation("Device");

                    b.Navigation("DeviceTypeProperty");
                });

            modelBuilder.Entity("Domain.Entities.DeviceType", b =>
                {
                    b.HasOne("Domain.Entities.DeviceType", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_DeviceTypes_DeviceTypes_ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.DeviceTypeProperty", b =>
                {
                    b.HasOne("Domain.Entities.DeviceType", "DeviceType")
                        .WithMany("DeviceTypeProperties")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DeviceTypeProperties_DeviceTypes_DeviceTypeId");

                    b.Navigation("DeviceType");
                });

            modelBuilder.Entity("Domain.Entities.Device", b =>
                {
                    b.Navigation("DevicePropertyValues");
                });

            modelBuilder.Entity("Domain.Entities.DeviceType", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("DeviceTypeProperties");

                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Domain.Entities.DeviceTypeProperty", b =>
                {
                    b.Navigation("DevicePropertyValue");
                });
#pragma warning restore 612, 618
        }
    }
}
